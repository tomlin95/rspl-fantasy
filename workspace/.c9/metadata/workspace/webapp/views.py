{"changed":true,"filter":false,"title":"views.py","tooltip":"/webapp/views.py","value":"from django.http import HttpResponse , HttpResponseRedirect\nfrom django.shortcuts import render,render_to_response, redirect\nfrom .forms import RegisterForm, FormationForm, CreateTeamForm\nfrom django.utils import timezone\nfrom .models import Players,Teams,User, Matches, Results\nfrom django.db.models import F\nimport json\nimport datetime\n\n\nfrom django.http import *\nfrom django.shortcuts import render_to_response,redirect\nfrom django.template import RequestContext\n#from birthdayreminder.models import *\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.shortcuts import render\nfrom django.contrib.auth.decorators import login_required\n\n\n\n\nfrom django.core.mail import send_mail\n# register your views here.\nteamnum = 0\n#user_players = []\n\n\n\ndef index(request):\n    return render(request, 'webapp/home.html')\n    \ndef register(request):\n    form =  RegisterForm()\n    return  render(request, 'webapp/user/register.html', {'form': form})\n\ndef create_user(request):\n    print(\"Inside create user\")\n    print(request.method)\n       # if this is a POST request we need to process the form data\n    if request.method == 'POST':\n        print(\"Method is post\")\n        # create a form instance and populate it with data from the request:\n        form = RegisterForm(request.POST)\n        # check whether it's valid:\n        if form.is_valid():\n            # process the data in form.cleaned_data as required\n            # ...\n            #global teamnum \n           \n            #team = Teams.objects.latest('id')\n            #global teamnum\n            #teamnum = team.id + 1\n            \n            print(form.cleaned_data)\n            user = form.save(commit=False)\n            user.balance = 1000000.00\n            user.weekly_score = 0\n            user.total_score = 0\n           \n\n            user.created_at = timezone.now()\n            user.save()\n            team =  Teams()\n            team.user_id = user.id\n            team.save()\n            \n            user = User.objects.get(id = user.id)\n            user.team_number =  team.id\n            user.save()\n            teamnum = team.id\n            request.session['user_id'] = user.id\n            request.session['user_name'] = user.name\n            request.session['team_id'] = team.id\n            request.session['user_players'] =[]\n            # redirect to a new URL:\n            form = FormationForm()\n            return render(request, 'webapp/team/formation.html', {'form':form})\n            #return HttpResponseRedirect('/team/formation/' )\n\n    # if a GET (or any other method) we'll create a blank form\n    else:\n        form = RegisterForm()\n\n    return render(request, 'webapp/user/register.html', {'form': form})\n    \ndef select_formation(request):\n     if request.method == 'POST':\n        print(\"Method is post\")\n        # create a form instance and populate it with data from the request:\n        form = FormationForm(request.POST)\n        # check whether it's valid:\n        if form.is_valid():\n            # process the data in form.cleaned_data as required\n            # ...\n            print(form.cleaned_data)\n            print(form.cleaned_data[\"Select\"])\n            if form.cleaned_data[\"Select\"] == 'Formation 1':\n                formation = 1\n            elif form.cleaned_data[\"Select\"] == 'Formation 2':\n                formation = 2\n            else:\n                formation = 3\n            user_players = []\n            balance =  1000000\n            # redirect to a new URL:\n            all_entries = Players.objects.all()\n            #user_players = 0\n            player_count = 1\n            return render(request, 'webapp/team/select_players.html', { 'gk': 0 , 'd': 0, 's': 0 , 'm': 0,'player_count':player_count, 'balance': balance, 'formation': formation, 'players': all_entries, 'user_players': request.session.get('user_players'), 'user_player_list': []})\n            \n     else:\n        form = FormationForm()\n\n     return render(request, 'webapp/team/formation.html', {'form': form})\n\n\ndef add_player(request):\n    print(\"je\")\n    if request.method == 'POST':\n     \n      formation = int(request.POST['formation'])\n    \n    \n      if formation == 1:\n        gk = 1\n        m = 3\n        d = 4\n        s = 3\n      elif formation == 2:\n        gk = 1\n        m = 4\n        d = 4\n        s = 2\n      else:\n        gk =1\n        m = 4\n        d = 5\n        s =1\n        \n    \n    \n      player_object =  Players.objects.get(id=int(request.POST['player_id']))\n      print (player_object.price)\n      balance = float(request.POST['balance']) - player_object.price\n     \n   \n      player_count = (int(request.POST['player_count']))\n      print (\"player count is \" )\n      print(player_count)\n      \n      if player_count <= 11 and balance >= 0:\n        \n         print(\"ITS A POST\")\n         print(request.POST)\n         if player_object.position == 'GK' and int(request.POST['gk']) < gk:\n             user_players = request.session.get('user_players')\n             user_players.append(int(request.POST['player_id']))\n             request.session['user_players'] = user_players\n             user_player_list = []\n             \n             print(request.session.get('user_players'))\n             for u in user_players:\n                 user_player_list.append(Players.objects.get(id=u))\n             player_count = int(request.POST['player_count']) + 1\n             all_entries = Players.objects.all()\n            \n             gk = int(request.POST['gk']) +  1\n             return render(request, 'webapp/team/select_players.html', {'gk': gk, 'd':int(request.POST['d']), 's': int(request.POST['s']), 'm':int(request.POST['m']),'player_count':player_count,'balance': balance, 'formation': str(request.POST.get('formation')), 'players': all_entries , 'user_players': user_players , 'user_player_list':user_player_list})\n   \n         elif player_object.position == 'D' and int(request.POST['d']) < d:\n             user_players = request.session.get('user_players')\n             user_players.append(int(request.POST['player_id']))\n             request.session['user_players'] = user_players\n             user_player_list = []\n             \n             print(request.session.get('user_players'))\n             for u in user_players:\n                 user_player_list.append(Players.objects.get(id=u))\n             player_count = int(request.POST['player_count']) + 1\n             all_entries = Players.objects.all()\n            \n             d = int(request.POST['d']) + 1\n             return render(request, 'webapp/team/select_players.html', {'gk': int(request.POST['gk']), 'd':d ,'s': int(request.POST['s']), 'm':int(request.POST['m']),'player_count':player_count,'balance': balance, 'formation': str(request.POST.get('formation')), 'players': all_entries , 'user_players': user_players , 'user_player_list':user_player_list})\n        \n \n         elif player_object.position == 'S' and int(request.POST['s']) < s:\n             print(\"111111111\")\n             print(request.session.get('user_players'))\n             user_players = request.session.get('user_players')\n             user_players.append(int(request.POST['player_id']))\n             request.session['user_players'] = user_players\n             user_player_list = []\n             \n             print(request.session.get('user_players'))\n             for u in user_players:\n                 user_player_list.append(Players.objects.get(id=u))\n             player_count = int(request.POST['player_count']) + 1\n             all_entries = Players.objects.all()\n            \n             s = int(request.POST['s']) + 1\n             return render(request, 'webapp/team/select_players.html', {'gk': int(request.POST['gk']), 'd':int(request.POST['d']), 's': s, 'm':int(request.POST['m']),'player_count':player_count,'balance': balance, 'formation': str(request.POST.get('formation')), 'players': all_entries , 'user_players': user_players , 'user_player_list':user_player_list})\n         \n \n \n         elif player_object.position  == 'M' and int(request.POST['m']) < m:\n             user_players = request.session.get('user_players')\n             user_players.append(int(request.POST['player_id']))\n             request.session['user_players'] = user_players\n             user_player_list = []\n             \n             print(request.session.get('user_players'))\n             for u in user_players:\n                 user_player_list.append(Players.objects.get(id=u))\n             player_count = int(request.POST['player_count']) + 1\n             all_entries = Players.objects.all()\n            \n             m = int(request.POST['m']) + 1\n             return render(request, 'webapp/team/select_players.html', {'gk': int(request.POST['m']), 'd':int(request.POST['d']), 's': int(request.POST['s']), 'm':m,'player_count':player_count,'balance': balance, 'formation': str(request.POST.get('formation')), 'players': all_entries , 'user_players': user_players , 'user_player_list':user_player_list})\n         else:\n             user_players = request.session.get('user_players')\n\n             user_player_list = []\n             for u in user_players:\n              user_player_list.append(Players.objects.get(id=u))\n             all_entries = Players.objects.all()\n             if player_object.position == 'GK':\n                 position = 'Goal Keepers'\n             elif player_object.position == 'M':\n                 position = 'MidFielders'\n             elif player_object.position == 'S':\n                 position = 'Strikers'\n             else:\n                 position = 'Defenders'\n             return render(request, 'webapp/team/select_players.html', {'gk': int(request.POST['gk']), 'd':int(request.POST['d']), 's': int(request.POST['s']), 'm':int(request.POST['m']),'notvalid': 1, 'message': 'You cannot select anymore ' + position , 'player_count': int(request.POST['player_count']),'balance': float(request.POST['balance']), 'formation': str(request.POST.get('formation')), 'players': all_entries , 'user_players': user_players , 'user_player_list': user_player_list})\n\n     \n      elif player_count > 11 and player_count <=14  and balance >= 0:\n             user_players = request.session.get('user_players')\n             user_players.append(int(request.POST['player_id']))\n             request.session['user_players'] = user_players\n             user_player_list = []\n             \n             print(request.session.get('user_players'))\n             for u in user_players:\n                 user_player_list.append(Players.objects.get(id=u))\n             player_count = int(request.POST['player_count']) + 1\n             all_entries = Players.objects.all()\n            \n           \n             return render(request, 'webapp/team/select_players.html', {'gk': int(request.POST['m']), 'd':int(request.POST['d']), 's': int(request.POST['s']),  'm':int(request.POST['m']),'player_count':player_count,'balance': request.POST['balance'], 'formation': str(request.POST.get('formation')), 'players': all_entries , 'user_players': user_players , 'user_player_list':user_player_list, 'message': 2})\n         \n        \n      elif player_count > 14 or balance <=0 :\n         print(\"ops in here\")\n         user_players = request.session.get('user_players')\n\n         user_player_list = []\n         for u in user_players:\n          user_player_list.append(Players.objects.get(id=u))\n         all_entries = Players.objects.all()\n         print(\"full\")\n         return render(request, 'webapp/team/select_players.html', {  'gk': int(request.POST['m']), 'd':int(request.POST['d']), 's': int(request.POST['s']),  'm':int(request.POST['m']), 'notvalid': 1, 'message': 'Oops You cannot select any more players','player_count': int(request.POST['player_count']),'balance': float(request.POST['balance']), 'formation': str(request.POST.get('formation')), 'players': all_entries , 'user_players': user_players , 'user_player_list': user_player_list})\n      else:\n        \n        return render(request, 'webapp/home.html')\n    all_entries = Players.objects.all()\n    user_players = request.session.get('user_players')\n    return render(request, 'webapp/team/select_players.html', { 'formation': request.POST.get('formation'), 'players': all_entries , 'user_players': user_players})\n \ndef remove_player(request):\n     if request.method == 'POST':\n         print(\"ITS A POST\")\n         user_players = request.session.get('user_players')\n         user_players.remove(int(request.POST['player_id']))\n         request.session['user_players'] = user_players\n       \n          \n       \n         user_player_list = []\n         for u in user_players:\n             user_player_list.append(Players.objects.get(id=u))\n         all_entries = Players.objects.all()\n         player_count = int(request.POST['player_count']) - 1\n         player_object =  Players.objects.get(id=int(request.POST['player_id']))\n         print (player_object.price)\n         balance = float(request.POST['balance']) + player_object.price\n         print(request.session.get('user_players'))\n         m = int(request.POST['m'])\n         s = int(request.POST['s'])\n         d = int(request.POST['d'])\n         gk =int(request.POST['s'])\n         if  player_object.position  == 'M':\n             m = int(request.POST['m']) - 1\n         elif player_object.position  == 'S':\n             s = int(request.POST['s']) - 1\n         elif  player_object.position  == 'D':\n             d = int(request.POST['d']) -1\n         else:\n             gk =int(request.POST['s']) - 1\n         player_count = int(request.POST['player_count']) - 1\n          \n         return render(request, 'webapp/team/select_players.html', {'gk': gk, 'd':d, 's': s,  'm':m, 'player_count':player_count,'balance': balance, 'formation': str(request.POST.get('formation')), 'players': all_entries , 'user_players': user_players , 'user_player_list':user_player_list})\n    \n     \n     else:\n        return render(request, 'webapp/home.html')\n     all_entries = Players.objects.all()\n     return render(request, 'webapp/team/select_players.html', { 'formation': request.POST.get('formation'), 'players': all_entries , 'user_players': user_players})\n \n\ndef submit_players(request):\n     if request.method == 'POST':\n        #form = CreateTeamForm()\n        user_players = request.session.get('user_players')\n        print(user_players)\n       # team = Teams()\n        # check whether it's valid:\n        if int(request.POST.get('formation')) == 1:\n            formation = 1\n        elif int(request.POST.get('formation')) == 2:\n            formation = 2\n        else:\n            formation = 3\n    \n        user= User.objects.get(id= request.session.get('user_id'))\n        team= Teams.objects.get(id = user.team_number)\n        team.user_id = user.id\n        team.formation = formation\n        \n        team.players = '{\"players\": '+ str( user_players[:11] ) +' , \"benchplayers\":  ' + str(user_players[-3:] )+ '}'\n        team.name = str(request.POST['teamname'])\n        team.save()\n        user.balance = float(request.POST['balance'])\n        user.save()\n        \n        # redirect to a new URL:\n        #return render(request, 'webapp/team/formation.html')\n        #return render(request, 'webapp/home.html')\n        return render(request, 'webapp/user/allset.html', {'user_id': request.session.get('user_id'), 'team_id': teamnum})          \n     else:\n        return render(request, 'webapp/home.html')\n        #return render(request,'webapp/allset.html', {'user_id': user.id, 'team_id': teamnum})\n    \ndef user_home(request):\n    update_players_score(1)\n    \n  \n    if request.method == 'POST':\n        update_weekly_score(request.session.get('user_id'))\n        update_total_score(request.session.get('user_id'))\n        user = User.objects.get(id=request.session.get('user_id'))\n        \n        first_person = User.objects.raw('SELECT id,  FIND_IN_SET( total_score, (SELECT GROUP_CONCAT( total_score ORDER BY total_score DESC ) FROM webapp_user )) AS rank FROM webapp_user WHERE id = ' + str(user.id))\n        rank = first_person[0].rank\n        team = Teams.objects.get(id=user.team_number)\n        print team.players\n        players_json = json.loads(team.players)\n        players = players_json['players']\n        benchplayers = players_json['benchplayers']\n        players_list = Players.objects.filter(id__in=players).order_by('position')\n        benchplayers_list = Players.objects.filter(id__in=benchplayers).order_by('position')\n        formation = team.formation\n        print (formation)\n       # lastmatch = Matches.object.get()\n       # return render(request, 'webapp/home.html')\n        delta = datetime.datetime(2017, 05, 20) - datetime.datetime.now()\n        print('sdd')\n        print (delta.days)\n        return render(request, 'webapp/user/user_home.html', {'rank':rank, 'user': user, 'team': team, 'players_list': players_list, 'benchplayers_list': benchplayers_list} )\n    \n    else:\n       \n        \n        update_weekly_score( request.session.get('user_id'))\n        print  int(request.GET.get('user_id', ''))\n        update_total_score( request.session.get('user_id'))\n        print( \"dssdsdsdd\")\n        user = User.objects.get(id=request.session.get('user_id'))\n        print user\n        first_person = User.objects.raw('SELECT id,  FIND_IN_SET( total_score, (SELECT GROUP_CONCAT( total_score ORDER BY total_score DESC ) FROM webapp_user )) AS rank FROM webapp_user WHERE id = ' + str(user.id))\n        rank = first_person[0].rank\n        team = Teams.objects.get(id=user.team_number)\n        print team.players\n        players_json = json.loads(team.players)\n        players = players_json['players']\n        benchplayers = players_json['benchplayers']\n        players_list = Players.objects.filter(id__in=players).order_by('position')\n        benchplayers_list = Players.objects.filter(id__in=benchplayers).order_by('position')\n       \n       # lastmatch = Matches.object.get()\n       # return render(request, 'webapp/home.html')\n        delta = datetime.datetime(2017, 05, 20) - datetime.datetime.now()\n        print('sdd')\n        print (delta.days)\n        formation = team.formation\n        print (formation)\n        return render(request, 'webapp/user/user_home.html', {'rank':rank, 'user': user, 'team': team, 'players_list': players_list, 'benchplayers_list': benchplayers_list} )\n    \n \ndef transfer(request):\n    if request.method == 'POST':\n        print request.POST\n        user = User.objects.get(id=int(request.POST['user_id']))\n        team = Teams.objects.get(id=user.team_number)\n        print team.players\n        players_json = json.loads(team.players)\n        players = players_json['players']\n        benchplayers = players_json['benchplayers']\n        players_list = []\n        for u in players:\n         players_list.append(Players.objects.get(id=u))\n        benchplayers_list = []\n        for b in benchplayers:\n         benchplayers_list.append(Players.objects.get(id=b))\n        \n        \n        return render(request, 'webapp/team/transferout.html',{'user_id': user.id, 'benchplayers_list': benchplayers_list, 'players_list':players_list})\n    return\n\n    \n    \n\ndef transferout(request):\n    print \"in here\"\n    if request.method == 'POST':\n        player =  Players.objects.get(id = int(request.POST['player_id']))\n        user = User.objects.get(id= int(request.POST['user_id']))\n        balance = user.balance + player.price\n        \n       \n        \n        all_players = Players.objects.all()\n        return render(request, 'webapp/team/transferin.html', {'transfered_player_price': player.price, 'transfered_player_id': player.id, 'balance': balance,'transfered_player': player.name, 'user_id':int(request.POST['user_id']), 'all_players': all_players})\n    return \n\ndef transferin(request):\n    if request.method == 'POST':\n     \n        player =  Players.objects.get(id = int(request.POST['player_id']))\n        user = User.objects.get(id= int(request.POST['user_id']))\n        tempbalance  = user.balance - float(request.POST['transfered_player_price'])\n        \n        user.balance = tempbalance + player.price\n        user.save()\n        team = Teams.objects.get(id=user.team_number)\n        players_json = json.loads(team.players)\n        players = players_json['players']\n        benchplayers = players_json['benchplayers']\n        players.remove(int(request.POST['transfered_player_id']))\n        players.append(int(request.POST['player_id']))\n        team.players = '{\"players\": '+ str( players ) +' , \"benchplayers\":  ' + str(benchplayers )+ '}'\n      \n        team.save()\n        \n        \n        return redirect('https://fantasy-joditay.c9users.io/team/transfer/sucess')\n       # lastmatch = Matches.object.get()\n       # return render(request, 'webapp/home.html')\n        #return render(request, 'webapp/user/user_home.html', {'user': user, 'team': team, 'players_list': players_list, 'benchplayers_list': benchplayers_list} )\ndef transfersuccess(request):\n    return render(request, 'webapp/team/transfersucces.html', {'user_id': request.session.get('user_id')})\n    \n\ndef substitute(request):\n    if request.method == 'POST':\n        user = User.objects.get(id= int(request.POST['user_id']))\n        team = Teams.objects.get(id=user.team_number)\n        players_json = json.loads(team.players)\n        players = players_json['players']\n        benchplayers = players_json['benchplayers']\n        players_list = []\n        for u in players:\n         players_list.append(Players.objects.get(id=u))\n        benchplayers_list = []\n        for b in benchplayers:\n         benchplayers_list.append(Players.objects.get(id=b))\n        return render(request, 'webapp/team/substituteout.html', {'user_id': user.id, 'players_list': players_list})\n    return\ndef substituteout(request):\n    print(\"in here\")\n    print(request)\n    if request.method == 'POST':\n        user = User.objects.get(id= int(request.POST['user_id']))\n        team = Teams.objects.get(id=user.team_number)\n        players_json = json.loads(team.players)\n        players = players_json['players']\n        benchplayers = players_json['benchplayers']\n        players_list = []\n        for u in players:\n         players_list.append(Players.objects.get(id=u))\n        benchplayers_list = []\n        for b in benchplayers:\n         benchplayers_list.append(Players.objects.get(id=b))\n        player = Players.objects.get(id=int(request.POST['player_id']))\n        print(\"!!!!!!!!!!!!!!!!!!!!!!!1\")\n        return render(request, 'webapp/team/substitutein.html', {'user_id': user.id,'subplayername': player.name, 'subplayerid': player.id, 'benchplayers_list': benchplayers_list})\n    print(\"q322525\")\n    return \n\ndef substitutein(request):\n      if request.method == 'POST':\n        print(request.POST)\n        user = User.objects.get(id= int(request.POST['user_id']))\n        team = Teams.objects.get(id=user.team_number)\n        players_json = json.loads(team.players)\n        players = players_json['players']\n        benchplayers = players_json['benchplayers']\n        players.remove(int(request.POST['subplayerid']))\n        players.append(int(request.POST['player_id']))\n        benchplayers.remove(int(request.POST['player_id']))\n        benchplayers.append(int(request.POST['subplayerid']))\n        team.players = '{\"players\": '+ str( players ) +' , \"benchplayers\":  ' + str(benchplayers )+ '}'\n      \n        team.save()\n        print(players)\n        print (\"___-------\")\n        print(benchplayers)\n        players_list = []\n        for u in players:\n         players_list.append(Players.objects.get(id=u))\n        benchplayers_list = []\n        for b in benchplayers:\n         benchplayers_list.append(Players.objects.get(id=b))\n       \n          \n        return render(request, 'webapp/user/user_home.html', {'delta':delta,'user': user, 'team': team, 'players_list': players_list, 'benchplayers_list': benchplayers_list} )\n      return\n  \ndef ranks(request):\n    users = User.objects.all().order_by('total_score').reverse()\n    return render(request, 'webapp/user/ranks.html', {'users': users})\n    \ndef leaguetable(request):\n    return render(request, 'webapp/leagueranks.html')\n\n\ndef update_total_score(user_id):\n    user = User.objects.get(id=user_id)\n    team = Teams.objects.get(id=user.team_number)\n    players_json = json.loads(team.players)\n    players = players_json['players']\n    temp_total_score = 0\n    for player_id in players:\n       player = Players.objects.get(id = player_id)\n       temp_total_score =  temp_total_score + player.score\n    user.total_score =  temp_total_score\n    user.save()\n    \n    return \n\ndef update_weekly_score(user_id):\n    \n    user = User.objects.get(id=user_id)\n    team = Teams.objects.get(id=user.team_number)\n    players_json = json.loads(team.players)\n    players = players_json['players']\n    temp_weekly_score = 0\n    for player_id in players:\n       player = Players.objects.get(id = player_id)\n       temp_weekly_score =  temp_weekly_score + player.weekly_score\n    user.weekly_score =  temp_weekly_score\n    user.save()\n    \n    \n    return \n\ndef update_players_score(weekgiven):\n    matches = Matches.objects.filter( week=weekgiven , status = 'true' , updated = 'false' )\n    print(matches)\n    for match in matches:\n        print(match) \n        results = Results.objects.filter(match_id = match.id)\n        \n        for result in results:\n            print(result.player_id)\n            player = Players.objects.filter(id=result.player_id)\n            print(player[0].name)\n            if player[0].position == 'S':\n             points =  (result.yc * -2) + (result.rc * -5) + (result.assist * 4) + (result.appearance) + (result.goal * 5) +   (result.own_goal * -2)\n            elif player[0].position == 'D':\n             points =  (result.yc * -2) + (result.rc * -5) + (result.assist * 5) + (result.appearance) + (result.goal * 6) + (result.cleansheet) +  (result.own_goal * -2)\n            elif player[0].position == 'M':\n             points =  (result.yc * -2) + (result.rc * -5) + (result.assist * 5) + (result.appearance) + (result.goal * 5) +  (result.own_goal * -2)\n            else:\n             points =  (result.yc * -2) + (result.rc * -5) + (result.assist * 3) + (result.appearance) + (result.goal * 5) + (result.cleansheet) +  (result.own_goal * -2)\n\n            Players.objects.filter(id=result.player_id).update(weekly_score=F('weekly_score')+ points)\n            Players.objects.filter(id=result.player_id).update(score= F('score')+ points)\n        Matches.objects.filter(id=match.id).update(updated='true')\n        print(matches)\n        for match in matches:\n            print(match.team1)\n            print(match.team2)\n         \n# make sure to to change match to updated\n    return \n\ndef matches(request):\n    return render(request, 'webapp/team/matches.html')\n\n\n\n# The name Facey, Leon Facey\n\n\ndef login_user(request):\n  \n    username = password = ''\n    if request.POST:\n        \n        username = request.POST['username']\n        password = request.POST['password']\n        try:\n            user = User.objects.get(user_name = username, password = password)\n        except User.DoesNotExist:\n            user = None\n        #user = authenticate(username=str(username), password=str(password))\n\n        if user is not None:\n          request.session['user_id'] = user.id\n          request.session['user_name'] = user.name\n          return redirect('/user/home/?user_id=%s' % user.id)\n        else:\n          return render(request, 'registration/login.html', {'notvalid': 1})\n          \n    #print(\"in 222 here\")\n    return render_to_response('registration/login.html', context_instance=RequestContext(request))\n\n\ndef logout_user(request):\n    request.session['user_id'] = None\n    request.session['user_name'] = None\n    request.session['user_players'] = None\n    request.session['team_id'] = None\n    return redirect('/')\n\ndef contact(request):\n    return render(request, 'webapp/contact.html')\ndef about(request):\n    return render(request, 'webapp/about.html')\n\ndef sendmail(request):\n    send_mail(\n    str(request.POST['subject']),\n    str(request.POST['msg']),\n    str(request.POST['email']),\n    ['jodimarietaylor18@gmail.com'],\n    fail_silently=False,\n    )\n    return render(request, 'webapp/contact.html' , {'message': 'sent'})\n    return ","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":569,"column":17},"end":{"row":569,"column":18},"action":"insert","lines":["c"],"id":15064}],[{"start":{"row":569,"column":18},"end":{"row":569,"column":19},"action":"insert","lines":["j"],"id":15065}],[{"start":{"row":569,"column":18},"end":{"row":569,"column":19},"action":"remove","lines":["j"],"id":15066}],[{"start":{"row":569,"column":18},"end":{"row":569,"column":19},"action":"insert","lines":["h"],"id":15067}],[{"start":{"row":567,"column":0},"end":{"row":567,"column":4},"action":"insert","lines":["    "],"id":15068}],[{"start":{"row":567,"column":4},"end":{"row":567,"column":5},"action":"insert","lines":["p"],"id":15069}],[{"start":{"row":567,"column":5},"end":{"row":567,"column":6},"action":"insert","lines":["r"],"id":15070}],[{"start":{"row":567,"column":6},"end":{"row":567,"column":7},"action":"insert","lines":["i"],"id":15071}],[{"start":{"row":567,"column":7},"end":{"row":567,"column":8},"action":"insert","lines":["n"],"id":15072}],[{"start":{"row":567,"column":8},"end":{"row":567,"column":9},"action":"insert","lines":["t"],"id":15073}],[{"start":{"row":567,"column":9},"end":{"row":567,"column":11},"action":"insert","lines":["()"],"id":15074}],[{"start":{"row":567,"column":10},"end":{"row":567,"column":11},"action":"insert","lines":["m"],"id":15075}],[{"start":{"row":567,"column":11},"end":{"row":567,"column":12},"action":"insert","lines":["a"],"id":15076}],[{"start":{"row":567,"column":12},"end":{"row":567,"column":13},"action":"insert","lines":["t"],"id":15077}],[{"start":{"row":567,"column":13},"end":{"row":567,"column":14},"action":"insert","lines":["c"],"id":15078}],[{"start":{"row":567,"column":14},"end":{"row":567,"column":15},"action":"insert","lines":["h"],"id":15079}],[{"start":{"row":567,"column":15},"end":{"row":567,"column":16},"action":"insert","lines":["e"],"id":15080}],[{"start":{"row":567,"column":16},"end":{"row":567,"column":17},"action":"insert","lines":["s"],"id":15081}],[{"start":{"row":587,"column":66},"end":{"row":588,"column":0},"action":"insert","lines":["",""],"id":15082},{"start":{"row":588,"column":0},"end":{"row":588,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":588,"column":8},"end":{"row":588,"column":23},"action":"insert","lines":[" print(matches)"],"id":15083}],[{"start":{"row":588,"column":8},"end":{"row":588,"column":9},"action":"remove","lines":[" "],"id":15084}],[{"start":{"row":588,"column":22},"end":{"row":589,"column":0},"action":"insert","lines":["",""],"id":15085},{"start":{"row":589,"column":0},"end":{"row":589,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":589,"column":8},"end":{"row":589,"column":29},"action":"insert","lines":["for match in matches:"],"id":15086}],[{"start":{"row":589,"column":29},"end":{"row":590,"column":0},"action":"insert","lines":["",""],"id":15087},{"start":{"row":590,"column":0},"end":{"row":590,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":590,"column":12},"end":{"row":590,"column":13},"action":"insert","lines":["m"],"id":15088}],[{"start":{"row":590,"column":13},"end":{"row":590,"column":14},"action":"insert","lines":["a"],"id":15089}],[{"start":{"row":590,"column":14},"end":{"row":590,"column":15},"action":"insert","lines":["t"],"id":15090}],[{"start":{"row":590,"column":15},"end":{"row":590,"column":16},"action":"insert","lines":["c"],"id":15091}],[{"start":{"row":590,"column":16},"end":{"row":590,"column":17},"action":"insert","lines":["h"],"id":15092}],[{"start":{"row":590,"column":17},"end":{"row":590,"column":18},"action":"insert","lines":["."],"id":15093}],[{"start":{"row":590,"column":18},"end":{"row":590,"column":19},"action":"insert","lines":["t"],"id":15094}],[{"start":{"row":590,"column":19},"end":{"row":590,"column":20},"action":"insert","lines":["e"],"id":15095}],[{"start":{"row":590,"column":20},"end":{"row":590,"column":21},"action":"insert","lines":["m"],"id":15096}],[{"start":{"row":590,"column":20},"end":{"row":590,"column":21},"action":"remove","lines":["m"],"id":15097}],[{"start":{"row":590,"column":20},"end":{"row":590,"column":21},"action":"insert","lines":["a"],"id":15098}],[{"start":{"row":590,"column":21},"end":{"row":590,"column":22},"action":"insert","lines":["m"],"id":15099}],[{"start":{"row":590,"column":22},"end":{"row":590,"column":23},"action":"insert","lines":["1"],"id":15100}],[{"start":{"row":590,"column":12},"end":{"row":590,"column":13},"action":"insert","lines":["p"],"id":15101}],[{"start":{"row":590,"column":13},"end":{"row":590,"column":14},"action":"insert","lines":["r"],"id":15102}],[{"start":{"row":590,"column":14},"end":{"row":590,"column":15},"action":"insert","lines":["i"],"id":15103}],[{"start":{"row":590,"column":15},"end":{"row":590,"column":16},"action":"insert","lines":["n"],"id":15104}],[{"start":{"row":590,"column":16},"end":{"row":590,"column":17},"action":"insert","lines":["t"],"id":15105}],[{"start":{"row":590,"column":17},"end":{"row":590,"column":18},"action":"insert","lines":["("],"id":15106}],[{"start":{"row":590,"column":29},"end":{"row":590,"column":30},"action":"insert","lines":[")"],"id":15107}],[{"start":{"row":590,"column":30},"end":{"row":591,"column":0},"action":"insert","lines":["",""],"id":15108},{"start":{"row":591,"column":0},"end":{"row":591,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":591,"column":12},"end":{"row":591,"column":13},"action":"insert","lines":["l"],"id":15109}],[{"start":{"row":591,"column":13},"end":{"row":591,"column":14},"action":"insert","lines":["r"],"id":15110}],[{"start":{"row":591,"column":13},"end":{"row":591,"column":14},"action":"remove","lines":["r"],"id":15111}],[{"start":{"row":591,"column":12},"end":{"row":591,"column":13},"action":"remove","lines":["l"],"id":15112}],[{"start":{"row":591,"column":12},"end":{"row":591,"column":13},"action":"insert","lines":["p"],"id":15113}],[{"start":{"row":591,"column":13},"end":{"row":591,"column":14},"action":"insert","lines":["r"],"id":15114}],[{"start":{"row":591,"column":14},"end":{"row":591,"column":15},"action":"insert","lines":["t"],"id":15115}],[{"start":{"row":591,"column":15},"end":{"row":591,"column":16},"action":"insert","lines":["i"],"id":15116}],[{"start":{"row":591,"column":16},"end":{"row":591,"column":17},"action":"insert","lines":["n"],"id":15117}],[{"start":{"row":591,"column":16},"end":{"row":591,"column":17},"action":"remove","lines":["n"],"id":15118}],[{"start":{"row":591,"column":15},"end":{"row":591,"column":16},"action":"remove","lines":["i"],"id":15119}],[{"start":{"row":591,"column":14},"end":{"row":591,"column":15},"action":"remove","lines":["t"],"id":15120}],[{"start":{"row":591,"column":14},"end":{"row":591,"column":15},"action":"insert","lines":["i"],"id":15121}],[{"start":{"row":591,"column":15},"end":{"row":591,"column":16},"action":"insert","lines":["n"],"id":15122}],[{"start":{"row":591,"column":16},"end":{"row":591,"column":17},"action":"insert","lines":["t"],"id":15123}],[{"start":{"row":591,"column":17},"end":{"row":591,"column":19},"action":"insert","lines":["()"],"id":15124}],[{"start":{"row":591,"column":18},"end":{"row":591,"column":19},"action":"insert","lines":["m"],"id":15125}],[{"start":{"row":591,"column":19},"end":{"row":591,"column":20},"action":"insert","lines":["a"],"id":15126}],[{"start":{"row":591,"column":20},"end":{"row":591,"column":21},"action":"insert","lines":["t"],"id":15127}],[{"start":{"row":591,"column":21},"end":{"row":591,"column":22},"action":"insert","lines":["c"],"id":15128}],[{"start":{"row":591,"column":22},"end":{"row":591,"column":23},"action":"insert","lines":["h"],"id":15129}],[{"start":{"row":591,"column":23},"end":{"row":591,"column":24},"action":"insert","lines":["."],"id":15130}],[{"start":{"row":591,"column":24},"end":{"row":591,"column":25},"action":"insert","lines":["t"],"id":15131}],[{"start":{"row":591,"column":25},"end":{"row":591,"column":26},"action":"insert","lines":["e"],"id":15132}],[{"start":{"row":591,"column":26},"end":{"row":591,"column":27},"action":"insert","lines":["a"],"id":15133}],[{"start":{"row":591,"column":27},"end":{"row":591,"column":28},"action":"insert","lines":["m"],"id":15134}],[{"start":{"row":591,"column":28},"end":{"row":591,"column":29},"action":"insert","lines":["2"],"id":15135}],[{"start":{"row":566,"column":84},"end":{"row":566,"column":88},"action":"remove","lines":["true"],"id":15137},{"start":{"row":566,"column":84},"end":{"row":566,"column":85},"action":"insert","lines":["f"]}],[{"start":{"row":566,"column":85},"end":{"row":566,"column":86},"action":"insert","lines":["a"],"id":15138}],[{"start":{"row":566,"column":86},"end":{"row":566,"column":87},"action":"insert","lines":["l"],"id":15139}],[{"start":{"row":566,"column":87},"end":{"row":566,"column":88},"action":"insert","lines":["s"],"id":15140}],[{"start":{"row":566,"column":88},"end":{"row":566,"column":89},"action":"insert","lines":["e"],"id":15141}],[{"start":{"row":150,"column":8},"end":{"row":150,"column":71},"action":"remove","lines":[" balance = float(request.POST['balance']) - player_object.price"],"id":15142}],[{"start":{"row":121,"column":48},"end":{"row":122,"column":0},"action":"insert","lines":["",""],"id":15143},{"start":{"row":122,"column":0},"end":{"row":122,"column":6},"action":"insert","lines":["      "]}],[{"start":{"row":122,"column":6},"end":{"row":122,"column":69},"action":"insert","lines":[" balance = float(request.POST['balance']) - player_object.price"],"id":15144}],[{"start":{"row":122,"column":6},"end":{"row":122,"column":7},"action":"remove","lines":[" "],"id":15145}],[{"start":{"row":122,"column":4},"end":{"row":122,"column":68},"action":"remove","lines":["  balance = float(request.POST['balance']) - player_object.price"],"id":15146}],[{"start":{"row":143,"column":33},"end":{"row":144,"column":0},"action":"insert","lines":["",""],"id":15147},{"start":{"row":144,"column":0},"end":{"row":144,"column":6},"action":"insert","lines":["      "]}],[{"start":{"row":144,"column":6},"end":{"row":144,"column":70},"action":"insert","lines":["  balance = float(request.POST['balance']) - player_object.price"],"id":15148}],[{"start":{"row":144,"column":4},"end":{"row":144,"column":8},"action":"remove","lines":["    "],"id":15149}],[{"start":{"row":144,"column":4},"end":{"row":144,"column":5},"action":"insert","lines":[" "],"id":15150}],[{"start":{"row":144,"column":5},"end":{"row":144,"column":6},"action":"insert","lines":[" "],"id":15151}],[{"start":{"row":237,"column":50},"end":{"row":237,"column":51},"action":"insert","lines":[" "],"id":15153}],[{"start":{"row":237,"column":51},"end":{"row":237,"column":52},"action":"insert","lines":[" "],"id":15154}],[{"start":{"row":237,"column":52},"end":{"row":237,"column":69},"action":"insert","lines":[" and balance >= 0"],"id":15155}],[{"start":{"row":237,"column":52},"end":{"row":237,"column":53},"action":"remove","lines":[" "],"id":15156}],[{"start":{"row":253,"column":30},"end":{"row":253,"column":31},"action":"remove","lines":["r"],"id":15157}],[{"start":{"row":253,"column":29},"end":{"row":253,"column":30},"action":"remove","lines":["o"],"id":15158}],[{"start":{"row":253,"column":29},"end":{"row":253,"column":30},"action":"insert","lines":["a"],"id":15159}],[{"start":{"row":253,"column":30},"end":{"row":253,"column":31},"action":"insert","lines":["n"],"id":15160}],[{"start":{"row":253,"column":31},"end":{"row":253,"column":32},"action":"insert","lines":["d"],"id":15161}],[{"start":{"row":253,"column":31},"end":{"row":253,"column":32},"action":"remove","lines":["d"],"id":15162}],[{"start":{"row":253,"column":30},"end":{"row":253,"column":31},"action":"remove","lines":["n"],"id":15163}],[{"start":{"row":253,"column":29},"end":{"row":253,"column":30},"action":"remove","lines":["a"],"id":15164}],[{"start":{"row":253,"column":29},"end":{"row":253,"column":30},"action":"insert","lines":["o"],"id":15165}],[{"start":{"row":253,"column":30},"end":{"row":253,"column":31},"action":"insert","lines":["r"],"id":15166}],[{"start":{"row":253,"column":31},"end":{"row":253,"column":32},"action":"insert","lines":["-"],"id":15167}]]},"ace":{"folds":[],"scrolltop":5483.5,"scrollleft":0,"selection":{"start":{"row":399,"column":0},"end":{"row":400,"column":22},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1495140276596}